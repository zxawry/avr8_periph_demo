// file: ssd1306.h
// author: awry

#ifndef SSD1306_INTERNAL_H
#define SSD1306_INTERNAL_H

#include <avr/pgmspace.h>

#define SSD1306_TWI_ADDR (0x3C)

#define SSD1306_COMMAND           (0x80)  // Continuation bit=1, D/C=0; 1000 0000
#define SSD1306_COMMAND_STREAM    (0x00)  // Continuation bit=0, D/C=0; 0000 0000
#define SSD1306_DATA              (0xC0)  // Continuation bit=1, D/C=1; 1100 0000
#define SSD1306_DATA_STREAM       (0x40)  // Continuation bit=0, D/C=1; 0100 0000

#define SSD1306_SET_MUX_RATIO     (0xA8)
#define SSD1306_DISPLAY_OFFSET    (0xD3)
#define SSD1306_DISPLAY_ON        (0xAF)
#define SSD1306_DISPLAY_OFF       (0xAE)
#define SSD1306_DIS_ENT_DISP_ON   (0xA4)
#define SSD1306_DIS_IGNORE_RAM    (0xA5)
#define SSD1306_DIS_NORMAL        (0xA6)
#define SSD1306_DIS_INVERSE       (0xA7)
#define SSD1306_DEACT_SCROLL      (0x2E)
#define SSD1306_ACTIVE_SCROLL     (0x2F)
#define SSD1306_SET_START_LINE    (0x40)
#define SSD1306_MEMORY_ADDR_MODE  (0x20)
#define SSD1306_SET_COLUMN_ADDR   (0x21)
#define SSD1306_SET_PAGE_ADDR     (0x22)
#define SSD1306_SEG_REMAP         (0xA0)
#define SSD1306_SEG_REMAP_OP      (0xA1)
#define SSD1306_COM_SCAN_DIR      (0xC0)
#define SSD1306_COM_SCAN_DIR_OP   (0xC8)
#define SSD1306_COM_PIN_CONF      (0xDA)
#define SSD1306_SET_CONTRAST      (0x81)
#define SSD1306_SET_OSC_FREQ      (0xD5)
#define SSD1306_SET_CHAR_REG      (0x8D)
#define SSD1306_SET_PRECHARGE     (0xD9)
#define SSD1306_VCOM_DESELECT     (0xDB)

#define CLEAR_COLOR               (0x00)

#define INIT_STATUS               (0xFF)

#define START_PAGE_ADDR           (0)
#define END_PAGE_ADDR             (7)     // 7 for 128x64, 3 for 128x32 version
#define START_COLUMN_ADDR         (0)
#define END_COLUMN_ADDR           (127)
#define RAM_X_END                 (END_COLUMN_ADDR + 1)
#define RAM_Y_END                 (END_PAGE_ADDR + 1)

#define CACHE_SIZE_MEM            ((1 + END_PAGE_ADDR) * (1 + END_COLUMN_ADDR))

#define MAX_X                     END_COLUMN_ADDR
#define MAX_Y                     ((END_PAGE_ADDR + 1) * 8)

#define SSD1306_INIT_SEQ_LEN (31)

const uint8_t SSD1306_INIT_SEQ[] PROGMEM = {
	SSD1306_DISPLAY_OFF,                                         // 0xAE = Set Display OFF
	SSD1306_SET_MUX_RATIO, 63,                                   // 0xA8 - 64MUX for 128 x 64 version
	                                                             //      - 32MUX for 128 x 32 version
	SSD1306_MEMORY_ADDR_MODE, 0x00,                              // 0x20 = Set Memory Addressing Mode
	                                                             // 0x00 - Horizontal Addressing Mode
	                                                             // 0x01 - Vertical Addressing Mode
	                                                             // 0x02 - Page Addressing Mode (RESET)
	SSD1306_SET_COLUMN_ADDR, START_COLUMN_ADDR, END_COLUMN_ADDR, // 0x21 = Set Column Address, 0 - 127
	SSD1306_SET_PAGE_ADDR, START_PAGE_ADDR, END_PAGE_ADDR,       // 0x22 = Set Page Address, 0 - 7
	SSD1306_SET_START_LINE,                                      // 0x40
	SSD1306_DISPLAY_OFFSET, 0x00,                                // 0xD3
	SSD1306_SEG_REMAP_OP,                                        // 0xA0 / remap 0xA1
	SSD1306_COM_SCAN_DIR_OP,                                     // 0xC0 / remap 0xC8
	SSD1306_COM_PIN_CONF, 0x12,                                  // 0xDA, 0x12 - Disable COM Left/Right remap, Alternative COM pin configuration
	                                                             //       0x12 - for 128 x 64 version
	                                                             //       0x02 - for 128 x 32 version
	SSD1306_SET_CONTRAST, 0x7F,                                  // 0x81, 0x7F - reset value (max 0xFF)
	SSD1306_DIS_ENT_DISP_ON,                                     // 0xA4
	SSD1306_DIS_NORMAL,                                          // 0xA6
	SSD1306_SET_OSC_FREQ, 0x80,                                  // 0xD5, 0x80 => D=1; DCLK = Fosc / D <=> DCLK = Fosc
	SSD1306_SET_PRECHARGE, 0xc2,                                 // 0xD9, higher value less blinking
	                                                             // 0xC2, 1st phase = 2 DCLK,  2nd phase = 13 DCLK
	SSD1306_VCOM_DESELECT, 0x20,                                 // Set V COMH Deselect, reset value 0x22 = 0,77xUcc
	SSD1306_SET_CHAR_REG, 0x14,                                  // 0x8D, Enable charge pump during display on
	SSD1306_DISPLAY_ON                                           // 0xAF = Set Display ON
};

const uint8_t SSD1306_ASCII_FONT[][8] PROGMEM = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	// 0x20
	{0x00,0x06,0x5F,0x5F,0x06,0x00,0x00,0x00},	// 0x21
	{0x00,0x07,0x07,0x00,0x07,0x07,0x00,0x00},	// 0x22
	{0x14,0x7F,0x7F,0x14,0x7F,0x7F,0x14,0x00},	// 0x23
	{0x24,0x2E,0x6B,0x6B,0x3A,0x12,0x00,0x00},	// 0x24
	{0x46,0x66,0x30,0x18,0x0C,0x66,0x62,0x00},	// 0x25
	{0x30,0x7A,0x4F,0x5D,0x37,0x7A,0x48,0x00},	// 0x26
	{0x04,0x07,0x03,0x00,0x00,0x00,0x00,0x00},	// 0x27
	{0x00,0x1C,0x3E,0x63,0x41,0x00,0x00,0x00},	// 0x28
	{0x00,0x41,0x63,0x3E,0x1C,0x00,0x00,0x00},	// 0x29
	{0x08,0x2A,0x3E,0x1C,0x1C,0x3E,0x2A,0x08},	// 0x2A
	{0x08,0x08,0x3E,0x3E,0x08,0x08,0x00,0x00},	// 0x2B
	{0x00,0xA0,0xE0,0x60,0x00,0x00,0x00,0x00},	// 0x2C
	{0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00},	// 0x2D
	{0x00,0x00,0x60,0x60,0x00,0x00,0x00,0x00},	// 0x2E
	{0x60,0x30,0x18,0x0C,0x06,0x03,0x01,0x00},	// 0x2F
	{0x3E,0x7F,0x59,0x4D,0x7F,0x3E,0x00,0x00},	// 0x30
	{0x42,0x42,0x7F,0x7F,0x40,0x40,0x00,0x00},	// 0x31
	{0x62,0x73,0x59,0x49,0x6F,0x66,0x00,0x00},	// 0x32
	{0x22,0x63,0x49,0x49,0x7F,0x36,0x00,0x00},	// 0x33
	{0x18,0x1C,0x16,0x13,0x7F,0x7F,0x10,0x00},	// 0x34
	{0x27,0x67,0x45,0x45,0x7D,0x39,0x00,0x00},	// 0x35
	{0x3C,0x7E,0x4B,0x49,0x79,0x30,0x00,0x00},	// 0x36
	{0x03,0x63,0x71,0x19,0x0F,0x07,0x00,0x00},	// 0x37
	{0x36,0x7F,0x49,0x49,0x7F,0x36,0x00,0x00},	// 0x38
	{0x06,0x4F,0x49,0x69,0x3F,0x1E,0x00,0x00},	// 0x39
	{0x00,0x00,0x6C,0x6C,0x00,0x00,0x00,0x00},	// 0x3A
	{0x00,0xA0,0xEC,0x6C,0x00,0x00,0x00,0x00},	// 0x3B
	{0x08,0x1C,0x36,0x63,0x41,0x00,0x00,0x00},	// 0x3C
	{0x14,0x14,0x14,0x14,0x14,0x14,0x00,0x00},	// 0x3D
	{0x00,0x41,0x63,0x36,0x1C,0x08,0x00,0x00},	// 0x3E
	{0x02,0x03,0x51,0x59,0x0F,0x06,0x00,0x00},	// 0x3F
	{0x3E,0x7F,0x41,0x5D,0x5D,0x1F,0x1E,0x00},	// 0x40
	{0x7C,0x7E,0x13,0x13,0x7E,0x7C,0x00,0x00},	// 0x41
	{0x41,0x7F,0x7F,0x49,0x49,0x7F,0x36,0x00},	// 0x42
	{0x1C,0x3E,0x63,0x41,0x41,0x63,0x22,0x00},	// 0x43
	{0x41,0x7F,0x7F,0x41,0x63,0x7F,0x1C,0x00},	// 0x44
	{0x41,0x7F,0x7F,0x49,0x5D,0x41,0x63,0x00},	// 0x45
	{0x41,0x7F,0x7F,0x49,0x1D,0x01,0x03,0x00},	// 0x46
	{0x1C,0x3E,0x63,0x41,0x51,0x73,0x72,0x00},	// 0x47
	{0x7F,0x7F,0x08,0x08,0x7F,0x7F,0x00,0x00},	// 0x48
	{0x00,0x41,0x7F,0x7F,0x41,0x00,0x00,0x00},	// 0x49
	{0x30,0x70,0x40,0x41,0x7F,0x3F,0x01,0x00},	// 0x4A
	{0x41,0x7F,0x7F,0x08,0x1C,0x77,0x63,0x00},	// 0x4B
	{0x41,0x7F,0x7F,0x41,0x40,0x60,0x70,0x00},	// 0x4C
	{0x7F,0x7F,0x06,0x0C,0x06,0x7F,0x7F,0x00},	// 0x4D
	{0x7F,0x7F,0x06,0x0C,0x18,0x7F,0x7F,0x00},	// 0x4E
	{0x1C,0x3E,0x63,0x41,0x63,0x3E,0x1C,0x00},	// 0x4F
	{0x41,0x7F,0x7F,0x49,0x09,0x0F,0x06,0x00},	// 0x50
	{0x1E,0x3F,0x21,0x71,0x7F,0x5E,0x00,0x00},	// 0x51
	{0x41,0x7F,0x7F,0x19,0x39,0x6F,0x46,0x00},	// 0x52
	{0x26,0x67,0x4D,0x59,0x7B,0x32,0x00,0x00},	// 0x53
	{0x03,0x41,0x7F,0x7F,0x41,0x03,0x00,0x00},	// 0x54
	{0x7F,0x7F,0x40,0x40,0x7F,0x7F,0x00,0x00},	// 0x55
	{0x1F,0x3F,0x60,0x60,0x3F,0x1F,0x00,0x00},	// 0x56
	{0x7F,0x7F,0x30,0x18,0x30,0x7F,0x7F,0x00},	// 0x57
	{0x63,0x77,0x1C,0x08,0x1C,0x77,0x63,0x00},	// 0x58
	{0x07,0x4F,0x78,0x78,0x4F,0x07,0x00,0x00},	// 0x59
	{0x67,0x73,0x59,0x4D,0x47,0x63,0x71,0x00},	// 0x5A
	{0x00,0x7F,0x7F,0x41,0x41,0x00,0x00,0x00},	// 0x5B
	{0x01,0x03,0x06,0x0C,0x18,0x30,0x60,0x00},	// 0x5C
	{0x00,0x41,0x41,0x7F,0x7F,0x00,0x00,0x00},	// 0x5D
	{0x08,0x0C,0x06,0x03,0x06,0x0C,0x08,0x00},	// 0x5E
	{0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80},	// 0x5F
	{0x00,0x00,0x03,0x07,0x04,0x00,0x00,0x00},	// 0x60
	{0x20,0x74,0x54,0x54,0x3C,0x78,0x40,0x00},	// 0x61
	{0x41,0x3F,0x7F,0x44,0x44,0x7C,0x38,0x00},	// 0x62
	{0x38,0x7C,0x44,0x44,0x6C,0x28,0x00,0x00},	// 0x63
	{0x30,0x78,0x48,0x49,0x3F,0x7F,0x40,0x00},	// 0x64
	{0x38,0x7C,0x54,0x54,0x5C,0x18,0x00,0x00},	// 0x65
	{0x48,0x7E,0x7F,0x49,0x03,0x02,0x00,0x00},	// 0x66
	{0x98,0xBC,0xA4,0xA4,0xF8,0x7C,0x04,0x00},	// 0x67
	{0x41,0x7F,0x7F,0x08,0x04,0x7C,0x78,0x00},	// 0x68
	{0x00,0x44,0x7D,0x7D,0x40,0x00,0x00,0x00},	// 0x69
	{0x40,0xC4,0x84,0xFD,0x7D,0x00,0x00,0x00},	// 0x6A
	{0x41,0x7F,0x7F,0x10,0x38,0x6C,0x44,0x00},	// 0x6B
	{0x00,0x41,0x7F,0x7F,0x40,0x00,0x00,0x00},	// 0x6C
	{0x7C,0x7C,0x0C,0x18,0x0C,0x7C,0x78,0x00},	// 0x6D
	{0x7C,0x7C,0x04,0x04,0x7C,0x78,0x00,0x00},	// 0x6E
	{0x38,0x7C,0x44,0x44,0x7C,0x38,0x00,0x00},	// 0x6F
	{0x84,0xFC,0xF8,0xA4,0x24,0x3C,0x18,0x00},	// 0x70
	{0x18,0x3C,0x24,0xA4,0xF8,0xFC,0x84,0x00},	// 0x71
	{0x44,0x7C,0x78,0x44,0x1C,0x18,0x00,0x00},	// 0x72
	{0x48,0x5C,0x54,0x54,0x74,0x24,0x00,0x00},	// 0x73
	{0x00,0x04,0x3E,0x7F,0x44,0x24,0x00,0x00},	// 0x74
	{0x3C,0x7C,0x40,0x40,0x3C,0x7C,0x40,0x00},	// 0x75
	{0x1C,0x3C,0x60,0x60,0x3C,0x1C,0x00,0x00},	// 0x76
	{0x3C,0x7C,0x60,0x30,0x60,0x7C,0x3C,0x00},	// 0x77
	{0x44,0x6C,0x38,0x10,0x38,0x6C,0x44,0x00},	// 0x78
	{0x9C,0xBC,0xA0,0xA0,0xFC,0x7C,0x00,0x00},	// 0x79
	{0x4C,0x64,0x74,0x5C,0x4C,0x64,0x00,0x00},	// 0x7A
	{0x08,0x08,0x3E,0x77,0x41,0x41,0x00,0x00},	// 0x7B
	{0x00,0x00,0x00,0x77,0x77,0x00,0x00,0x00},	// 0x7C
	{0x41,0x41,0x77,0x3E,0x08,0x08,0x00,0x00},	// 0x7D
	{0x02,0x03,0x01,0x03,0x02,0x03,0x01,0x00},	// 0x7E
	{0x78,0x7C,0x46,0x43,0x46,0x7C,0x78,0x00},	// 0x7F
};

#endif
